/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * EC Site API
 * OpenAPI spec version: 0.0.0
 */

import type { Result } from '@praha/byethrow';

import { customFetch } from '../../custom-fetch';
import type {
  Order,
  OrderItem,
  OrdersGetOrdersByUserIdParams,
  User,
} from '../schemas';

export const getOrdersGetOrdersByUserIdUrl = (
  params: OrdersGetOrdersByUserIdParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:3000/orders?${stringifiedParams}`
    : `http://localhost:3000/orders`;
};

export const ordersGetOrdersByUserId = async (
  params: OrdersGetOrdersByUserIdParams,
  options?: RequestInit,
): Result.ResultAsync<Order[], Error> => {
  return customFetch<Order[]>(getOrdersGetOrdersByUserIdUrl(params), {
    ...options,
    method: 'GET',
  });
};

export const getOrdersGetOrderItemsUrl = (orderId: string) => {
  return `http://localhost:3000/orders/${orderId}/items`;
};

export const ordersGetOrderItems = async (
  orderId: string,
  options?: RequestInit,
): Result.ResultAsync<OrderItem[], Error> => {
  return customFetch<OrderItem[]>(getOrdersGetOrderItemsUrl(orderId), {
    ...options,
    method: 'GET',
  });
};

export const getUsersGetUserUrl = (username: string) => {
  return `http://localhost:3000/users/${username}`;
};

export const usersGetUser = async (
  username: string,
  options?: RequestInit,
): Result.ResultAsync<User, Error> => {
  return customFetch<User>(getUsersGetUserUrl(username), {
    ...options,
    method: 'GET',
  });
};
