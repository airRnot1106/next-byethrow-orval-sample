/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * EC Site API
 * OpenAPI spec version: 0.0.0
 */
import { faker } from '@faker-js/faker';

import { delay, HttpResponse, http } from 'msw';

import type { Order, OrderItem, User } from '../schemas';

export const getOrdersGetOrdersByUserIdResponseMock = (): Order[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    userId: faker.string.alpha({ length: { min: 10, max: 20 } }),
    totalAmount: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    status: faker.helpers.arrayElement([
      'pending',
      'processing',
      'shipped',
      'delivered',
      'cancelled',
    ] as const),
    createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  }));

export const getOrdersGetOrderItemsResponseMock = (): OrderItem[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    orderId: faker.string.alpha({ length: { min: 10, max: 20 } }),
    productId: faker.string.alpha({ length: { min: 10, max: 20 } }),
    quantity: faker.number.int({
      min: undefined,
      max: undefined,
      multipleOf: undefined,
    }),
    price: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    product: {
      id: faker.string.alpha({ length: { min: 10, max: 20 } }),
      name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      price: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      description: faker.string.alpha({ length: { min: 10, max: 20 } }),
      stock: faker.number.int({
        min: undefined,
        max: undefined,
        multipleOf: undefined,
      }),
    },
  }));

export const getUsersGetUserResponseMock = (
  overrideResponse: Partial<User> = {},
): User => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  username: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`,
  ...overrideResponse,
});

export const getOrdersGetOrdersByUserIdMockHandler = (
  overrideResponse?:
    | Order[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Order[]> | Order[]),
) => {
  return http.get('*/orders', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getOrdersGetOrdersByUserIdResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getOrdersGetOrderItemsMockHandler = (
  overrideResponse?:
    | OrderItem[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<OrderItem[]> | OrderItem[]),
) => {
  return http.get('*/orders/:orderId/items', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getOrdersGetOrderItemsResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getUsersGetUserMockHandler = (
  overrideResponse?:
    | User
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<User> | User),
) => {
  return http.get('*/users/:username', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUsersGetUserResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getECSiteAPIMock = () => [
  getOrdersGetOrdersByUserIdMockHandler(),
  getOrdersGetOrderItemsMockHandler(),
  getUsersGetUserMockHandler(),
];
